{"ast":null,"code":"var _jsxFileName = \"/u/css/crumbleydm/VisualGroupWork/src/Components/Circle.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Circle(_ref) {\n  let {\n    data,\n    scale,\n    label,\n    hover\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: data.map((d, i) => /*#__PURE__*/_jsxDEV(\"circle\", {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 33\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 9\n  }, this);\n}\n_c = Circle;\nexport default Circle;\nvar _c;\n$RefreshReg$(_c, \"Circle\");","map":{"version":3,"names":["Circle","_ref","data","scale","label","hover","_jsxDEV","children","map","d","i","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/u/css/crumbleydm/VisualGroupWork/src/Components/Circle.js"],"sourcesContent":["function Circle({ data, scale, label, hover }) {\n    return (\n        <g>\n            {data.map((d, i) => <circle key={i} />)}\n            {/*\n                *************************************************************************************************************************************************\n                * data is the array for a specific key.                                                                                                         *\n                * Create a circle for each item in this array.                                                                                                  *\n                * Define the circle with the following attributes                                                                                               *\n                *   cx = {...} - the x position of the circle, defined by the x scale and the index i                                                           *\n                *   cy = {...} - the y position of the circle, defined by the y scale and the value d                                                           *\n                *   r = '6' -  the radius, here I manually set it to 6 (it's not good but make it simpler)                                                     *\n                *   fill = {...} - the filled color, defined by the color scale and the label                                                                   *\n                * Define the mouse hovering listener                                                                                                            *\n                *   onMouseOver = {hover(i)} - when hovering on a circle, call the Hover method (defined in App.js) by passing the index                        *                  \n                *   onMouseOut = {hover(-1)} - when mouse leave this circle, call the Hover method by passing -1 (which means no circle is under hovering)      *\n                *************************************************************************************************************************************************\n            */}\n            \n        </g>\n    )\n}\n\nexport default Circle;"],"mappings":";;AAAA,SAASA,MAAMA,CAAAC,IAAA,EAAgC;EAAA,IAA/B;IAAEC,IAAI;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAAJ,IAAA;EACzC,oBACIK,OAAA;IAAAC,QAAA,EACKL,IAAI,CAACM,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBAAKJ,OAAA,eAAaI,CAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAgBvC;AAEZ;AAACC,EAAA,GArBQf,MAAM;AAuBf,eAAeA,MAAM;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}